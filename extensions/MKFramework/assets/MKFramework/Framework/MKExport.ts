import { mkLog } from "./MKLogger";

export { default as MVCModelBase } from "./Module/MVC/MVCModelBase";
export { default as MVCViewBase } from "./Module/MVC/MVCViewBase";
export { default as MVCControlBase } from "./Module/MVC/MVCControlBase";
export { default as Task } from "./Task/MKTask";
export { mkAudio as audio, MKAudio_ as Audio_ } from "./Audio/MKAudioExport";
export { default as Language, languageManage, LanguageManage_ as Language_ } from "./Language/MKLanguage";
export { default as Layer } from "./Module/MKLayer";
export { default as LifeCycle } from "./Module/MKLifeCycle";
export { default as SceneDrive } from "./Module/MKSceneDrive";
export { default as ViewBase } from "./Module/MKViewBase";
export { default as StaticViewBase } from "./Module/MKStaticViewBase";
export { default as Network } from "./Network/MKNetwork";
export { default as bundle, MKBundle_ as Bundle_ } from "./Resources/MKBundle";
export { default as asset } from "./Resources/MKAsset";
export type { MKAsset_ as Asset_ } from "./Resources/MKAsset";
export { default as CodecBase, MKCodecBase_ as CodecBase_ } from "./MKCodecBase";
export { default as dataSharer } from "./MKDataSharer";
export { default as EventTarget } from "./MKEventTarget";
export { default as InstanceBase } from "./MKInstanceBase";
export { default as Logger } from "./MKLogger";
export { default as monitor } from "./MKMonitor";
export { default as ObjectPool } from "./MKObjectPool";
export { default as Storage } from "./MKStorage";
export { default as uiManage, MKUIManage_ as UIManage_ } from "./MKUIManage";
export { default as GuideManage } from "./Guide/MKGuideManage";
export type { MKGuideManage_ as GuideManage_ } from "./Guide/MKGuideManage";
export { default as dynamicModule } from "./MKDynamicModule";
export { default as GuideStepBase } from "./Guide/MKGuideStepBase";
export { default as game } from "./MKGame";
export { MKPolygonMask as PolygonMask } from "./@Component/MKPolygonMask";
export { default as Release } from "./MKRelease";
export type { MKRelease_ as Release_ } from "./MKRelease";
export { default as N } from "./@Extends/@Node/MKNodes";

const log = mkLog.log.bind(mkLog);
const warn = mkLog.warn.bind(mkLog);
const error = mkLog.error.bind(mkLog);

export { log, warn, error };
