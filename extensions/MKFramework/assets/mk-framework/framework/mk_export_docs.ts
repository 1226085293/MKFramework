import { mkLog } from "./MKLogger";

export { default as mvc_model_base } from "./Module/mvc/mvc_model_base";
export { default as mvc_view_base } from "./Module/mvc/mvc_view_base";
export { default as mvc_control_base } from "./Module/mvc/mvc_control_base";
export { default as task } from "./task/mk_task";
export { audio, mk_audio_ as audio_ } from "./Audio/MKAudioExport";
export { default as language, LanguageManage as language_manage, LanguageManage_ as language_ } from "./Language/MKLanguage";
export { default as layer } from "./Module/MKLayer";
export type { _MKLayer as layer_ } from "./Module/MKLayer";
export { default as life_cycle } from "./Module/MKLifeCycle";
export { default as scene_drive } from "./Module/MKSceneDrive";
export { default as view_base } from "./Module/MKViewBase";
export { default as network } from "./network/mk_network_docs";
export { mk_bundle as bundle, mk_bundle_ as bundle_ } from "./resources/mk_bundle";
export { mk_asset as asset } from "./resources/mk_asset";
export type { mk_asset_ as asset_ } from "./resources/mk_asset";
export { default as codec_base, mk_codec_base_ as codec_base_ } from "./mk_codec_base";
export { default as data_sharer } from "./mk_data_sharer";
export { default as event_target } from "./mk_event_target";
export { default as instance_base } from "./MKInstanceBase";
export { default as logger } from "./MKLogger";
export { mk_monitor as monitor } from "./MKMonitor";
export { default as obj_pool } from "./mk_obj_pool";
export { default as storage } from "./mk_storage";
export { mk_ui_manage as ui_manage, mk_ui_manage_ as ui_manage_ } from "./mk_ui_manage";
export { default as guide_manage } from "./Guide/MKGuideManage";
export type { MKGuideManage_ as guide_manage_ } from "./Guide/MKGuideManage";
export { mk_dynamic_module as dynamic_module } from "./mk_dynamic_module";
export { default as guide_step_base } from "./Guide/MKGuideStepBase";
export { mk_game as game } from "./mk_game";
export { MKPolygonMask as polygon_mask } from "./@Component/MKPolygonMask";
export { default as release } from "./mk_release";
export type { mk_release_ as release_ } from "./mk_release";
export { default as N } from "./@Extends/@Node/MKNodes";

const log = mkLog.log.bind(mkLog);
const warn = mkLog.warn.bind(mkLog);
const error = mkLog.error.bind(mkLog);

export { log, warn, error };
